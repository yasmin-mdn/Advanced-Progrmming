#pragma checksum "c:\git\AP98992\TA\aw13\BookFinder\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "64dc09f1243293d678bce668487f47af810e0f3d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BookFinder.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#line 3 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#line 4 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 5 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 6 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 7 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 8 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using BookFinder;

#line default
#line hidden
#line 9 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using BookFinder.Data;

#line default
#line hidden
#line 10 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Radzen;

#line default
#line hidden
#line 11 "c:\git\AP98992\TA\aw13\BookFinder\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#line 2 "c:\git\AP98992\TA\aw13\BookFinder\Pages\Index.razor"
using System.Globalization;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 77 "c:\git\AP98992\TA\aw13\BookFinder\Pages\Index.razor"
         
    private string findedbookname = "";
    private string findedbookpath = "";
    private string content = "";
    bool search = false;
    bool analyze = false;


    private float posetiveRate = 0;
    private float negetiveRate = 0;
    private float PosetiveDividedbyNegetiv = 0;
    private int totalwords = 0;

    private int posetivenomber = 0;
    private int negetivenomber = 0;


   private List<ChartData> chartDatas=new List<ChartData>();


    private string findedbookimagepath = "";
    private string searchkey = null;

    protected override void OnInitialized()
    {
        BookFinder.Data.Book.GetFilesFromDirectories();
    }


    private void FindBook()
    {
        content = "";
        findedbookname = "";
        findedbookimagepath = "";
        search = true;
        var input = searchkey;
        var findedbook = BookFinder.Data.Book.FindBook(input);
        findedbookpath = findedbook;
        var findedbookimage = BookFinder.Data.Book.FindBookImage(input);
        var words = BookFinder.Data.Book.First50Words(findedbook);
        findedbookname = findedbook.Split('\\', '.')[2];
        content = words;
        findedbookimagepath = findedbookimage.Split('\\')[1] + "\\" + findedbookimage.Split('\\')[2];
        searchkey = null;
    }
    private void Analyze()
    {

        totalwords = 0;
        posetivenomber = 0;
        negetivenomber = 0;
        totalwords = BookFinder.Data.Book.IndexFile(findedbookpath);
        BookFinder.Data.Book.CountPandN(findedbookpath);
        posetivenomber=BookFinder.Data.Book.posetivewordsper100line.Count;
        negetivenomber=BookFinder.Data.Book.negetivewordsper100line.Count;

        posetiveRate = BookFinder.Data.Book.posetivewordsper100line.Sum() / totalwords;
        negetiveRate = BookFinder.Data.Book.negetivewordsper100line.Sum() / totalwords;
        PosetiveDividedbyNegetiv = posetiveRate / negetiveRate;

        /////making chart data
      

        for(int i=0;i<BookFinder.Data.Book.negetivewordsper100line.Count;i++){
            this.chartDatas.Add(new ChartData(i,(float)BookFinder.Data.Book.posetivewordsper100line[i]/BookFinder.Data.Book.negetivewordsper100line[i]));
        }

        

    }


    class ChartData{
        public int idx{ get; set;}
        public float Value{get; set;}
        public ChartData(int a , float b){
            this.idx=a;
            this.Value=b;
        }
    }



#line default
#line hidden
    }
}
#pragma warning restore 1591
